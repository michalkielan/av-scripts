#!/bin/bash

# This script converts video files (.MOV) to H.265/HEVC format. It
# automatically detects the platform (Linux or macOS) and adjusts the FFmpeg
# settings accordingly:
#
#     Linux: Uses hevc_nvenc for hardware-accelerated encoding.
#     macOS: Uses hevc_videotoolbox for hardware-accelerated encoding.
#
# If the platform is unsupported, the script will exit with an error.
# Usage
#
#     ./to_h265.sh
#
#     The converted files will be saved in the h265 directory.

AUDIO_CODECS_ACC=("libfdk_aac" "aac_at" "aac")
OUT_DIR="h265"
INPUT_FORMAT="MOV"
OUTPUT_FORMAT="MKV"
VIDEO_HWACCEL="auto"
VIDEO_OPTIONS=""

is_hardware_supported() {
	local hwaccel=$1
	local video_options='-f lavfi -i nullsrc=s=176x144 -t 0.1 -f null /dev/null'

	if [[ "$hwaccel" == "cuda" ]]; then
		ffmpeg -hide_banner -init_hw_device cuda=cuda:0 $video_options &>/dev/null
	elif [[ "$hwaccel" == "videotoolbox" ]]; then
		ffmpeg -hide_banner -init_hw_device videotoolbox $video_options &>/dev/null
	else
		return 1
	fi
}

source "$(dirname "$0")/utils.sh"

PLATFORM=$(uname -s)
if [[ "$PLATFORM" == "Linux" ]]; then
	VIDEO_HWACCEL="cuda"
	VIDEO_CODEC="hevc_nvenc"
	VIDEO_OPTIONS="-preset slow \
    -qp 18 \
    -profile:v main10 \
    -pix_fmt p010le \
    -spatial_aq 1 \
    -temporal_aq 1"
elif [[ "$PLATFORM" == "Darwin" ]]; then
	VIDEO_HWACCEL="videotoolbox"
	VIDEO_CODEC="hevc_videotoolbox"
	VIDEO_OPTIONS="-tag:v hvc1 -q:v 65"
else
	echo "Error: Unsupported platform: '$PLATFORM'"
	exit 1
fi

if ! is_encoder_supported "$VIDEO_CODEC" || ! is_hardware_supported "$VIDEO_HWACCEL"; then
	echo "Error: '${VIDEO_CODEC}' or '${VIDEO_HWACCEL}' not supported. Fallback to SW"
	VIDEO_HWACCEL="none"
	VIDEO_CODEC="libx265"
	VIDEO_OPTIONS="-preset slow -crf 18"
fi

SELECTED_AUDIO_CODEC=""
for codec in "${AUDIO_CODECS_ACC[@]}"; do
	if is_encoder_supported "$codec"; then
		SELECTED_AUDIO_CODEC="$codec"
		break
	fi
done

if [ -z "$SELECTED_AUDIO_CODEC" ]; then
	echo "Error: No supported AAC encoder found."
	exit 1
fi

shopt -s nullglob
files=(*."${INPUT_FORMAT}")
total=${#files[@]}

if [[ $total -eq 0 ]]; then
	echo "Error: No files found with format '${INPUT_FORMAT}'"
	exit 1
fi

i=1
mkdir -p "${OUT_DIR}"

for input_file in "${files[@]}"; do
	echo "${input_file} ${i}/${total}"
	random_string=$(gen_random_string)
	base_name="${input_file%.*}"
	out_file_tmp="${OUT_DIR}/${base_name}${random_string}.tmp.${OUTPUT_FORMAT}"
	out_file="${OUT_DIR}/${base_name}.${OUTPUT_FORMAT}"

	if ! ffmpeg \
		-nostdin \
		-hwaccel ${VIDEO_HWACCEL} \
		-i "${input_file}" \
		-c:v ${VIDEO_CODEC} \
		${VIDEO_OPTIONS} \
		-c:a ${SELECTED_AUDIO_CODEC} \
		-b:a 320k \
		-map_metadata 0 \
		-loglevel warning \
		"${out_file_tmp}"; then
		echo "Error: ffmpeg failed"
		exit 1
	fi

	mv "${out_file_tmp}" "${out_file}"
	((i++))
done
